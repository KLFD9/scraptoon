// Test du nouveau syst√®me de recommandations statiques
console.log('üß™ Test du nouveau syst√®me de recommandations...');

async function testNewRecommendationSystem() {
  console.log('üóëÔ∏è Nettoyage du cache...');
  
  // Vider le cache des recommandations
  Object.keys(localStorage).forEach(key => {
    if (key.startsWith('user_recommendations')) {
      localStorage.removeItem(key);
      console.log('Supprim√©:', key);
    }
  });

  console.log('‚úÖ Cache vid√©');

  // Test 1: Recommandations sans favoris
  console.log('\nüî∏ Test 1: Recommandations g√©n√©rales (sans favoris)');
  try {
    const response = await fetch('/api/recommendations', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ limit: 5, favorites: [] })
    });

    const data = await response.json();
    console.log('‚úÖ R√©ponse re√ßue:', data.success);
    console.log('üìö Recommandations g√©n√©rales:', data.results?.map(r => `${r.title} (${r.type}) par ${r.author}`));
    
    // V√©rifier la diversit√© des types
    const types = data.results?.map(r => r.type) || [];
    const uniqueTypes = [...new Set(types)];
    console.log('üè∑Ô∏è Types pr√©sents:', uniqueTypes);
    
  } catch (error) {
    console.error('‚ùå Erreur test 1:', error);
  }

  // Test 2: Avec favoris simul√©s
  console.log('\nüî∏ Test 2: Recommandations avec favoris simul√©s');
  const testFavorites = [
    { id: 'fav1', author: 'Naoki Urasawa', type: 'manga' },
    { id: 'fav2', author: 'Takehiko Inoue', type: 'manga' }
  ];

  try {
    const response = await fetch('/api/recommendations', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ limit: 5, favorites: testFavorites })
    });

    const data = await response.json();
    console.log('‚úÖ R√©ponse re√ßue:', data.success);
    console.log('üìö Recommandations personnalis√©es:', data.results?.map(r => `${r.title} par ${r.author}`));
    
    // V√©rifier si on a des recommandations des m√™mes auteurs
    const authors = data.results?.map(r => r.author) || [];
    const hasUrasawa = authors.some(author => author?.includes('Urasawa'));
    const hasInoue = authors.some(author => author?.includes('Inoue'));
    
    console.log('üéØ Recommandations de Naoki Urasawa trouv√©es:', hasUrasawa);
    console.log('üéØ Recommandations de Takehiko Inoue trouv√©es:', hasInoue);
    
    if (hasUrasawa || hasInoue) {
      console.log('üéâ SUCC√àS: Le syst√®me de recommandations par auteur fonctionne!');
    } else {
      console.log('‚ö†Ô∏è Aucune recommandation par auteur trouv√©e');
    }
    
  } catch (error) {
    console.error('‚ùå Erreur test 2:', error);
  }

  // Test 3: API GET (utilis√©e quand pas de favoris c√¥t√© client)
  console.log('\nüî∏ Test 3: API GET (recommandations par d√©faut)');
  try {
    const response = await fetch('/api/recommendations?limit=5');
    const data = await response.json();
    console.log('‚úÖ R√©ponse GET re√ßue:', data.success);
    console.log('üìö Recommandations GET:', data.results?.map(r => r.title));
    
  } catch (error) {
    console.error('‚ùå Erreur test 3:', error);
  }

  console.log('\n‚ú® Tests termin√©s');
}

// Lancer le test
if (typeof window !== 'undefined') {
  testNewRecommendationSystem();
} else {
  console.log('Test uniquement disponible dans le navigateur');
}
