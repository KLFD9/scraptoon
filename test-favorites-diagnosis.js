// Test pour diagnostiquer le probl√®me de recommandations avec favoris
console.log('üîç Diagnostic complet du syst√®me de recommandations...');

async function diagnoseFavoritesIssue() {
  // 1. V√©rifier les favoris dans localStorage
  console.log('\nüìö 1. Analyse des favoris stock√©s:');
  const favoritesData = localStorage.getItem('mangaScraper_favorites');
  if (favoritesData) {
    try {
      const favorites = JSON.parse(favoritesData);
      console.log(`‚úÖ ${favorites.length} favoris trouv√©s:`);
      favorites.forEach((fav, index) => {
        console.log(`  ${index + 1}. "${fav.title}" par ${fav.author || 'Auteur inconnu'} (type: ${fav.type})`);
      });
      
      // Mapper vers le format attendu par l'API
      const mappedFavorites = favorites.map(f => {
        let contentType = 'manga';
        const langType = f.type || '';
        if (langType === 'ko') contentType = 'manhwa';
        else if (langType === 'zh' || langType === 'zh-hk') contentType = 'manhua';
        
        return {
          id: f.id,
          author: f.author,
          type: contentType
        };
      });
      
      console.log('\nüîÑ Favoris mapp√©s pour l\'API:', mappedFavorites);
      
      // 2. Tester l'API directement
      console.log('\nüîå 2. Test direct de l\'API de recommandations:');
      
      // Vider d'abord le cache pour forcer une nouvelle g√©n√©ration
      console.log('üóëÔ∏è Nettoyage du cache...');
      Object.keys(localStorage).forEach(key => {
        if (key.startsWith('user_recommendations')) {
          localStorage.removeItem(key);
          console.log(`  Supprim√©: ${key}`);
        }
      });
      
      // Appel API avec favoris
      const response = await fetch('/api/recommendations', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          limit: 5,
          favorites: mappedFavorites
        }),
      });

      if (!response.ok) {
        throw new Error(`HTTP Error ${response.status}`);
      }

      const data = await response.json();
      console.log('\nüìÑ R√©ponse de l\'API:', {
        success: data.success,
        count: data.results?.length || 0,
        cached: data.cached
      });
      
      if (data.results) {
        console.log('\nüéØ Recommandations re√ßues:');
        data.results.forEach((rec, index) => {
          console.log(`  ${index + 1}. "${rec.title}" par ${rec.author || 'Auteur inconnu'} (${rec.type})`);
        });
        
        // 3. Analyser si les recommandations sont li√©es aux favoris
        console.log('\nüîç 3. Analyse de la pertinence:');
        
        const favoriteAuthors = new Set(favorites.map(f => f.author).filter(Boolean));
        const recommendedAuthors = data.results.map(r => r.author).filter(Boolean);
        
        console.log('üë®‚Äçüé® Auteurs des favoris:', Array.from(favoriteAuthors));
        console.log('üë®‚Äçüé® Auteurs recommand√©s:', recommendedAuthors);
        
        // V√©rifier les correspondances d'auteurs
        const authorMatches = recommendedAuthors.filter(recAuthor => 
          Array.from(favoriteAuthors).some(favAuthor => 
            recAuthor.toLowerCase().includes(favAuthor.toLowerCase()) ||
            favAuthor.toLowerCase().includes(recAuthor.toLowerCase())
          )
        );
        
        if (authorMatches.length > 0) {
          console.log('üéâ SUCC√àS: Correspondances d\'auteurs trouv√©es:', authorMatches);
        } else {
          console.log('‚ö†Ô∏è PROBL√àME: Aucune correspondance d\'auteur trouv√©e');
          console.log('üí° Cela sugg√®re que la personnalisation ne fonctionne pas correctement');
        }
        
        // V√©rifier les types
        const favoriteTypes = mappedFavorites.map(f => f.type);
        const recommendedTypes = data.results.map(r => r.type);
        
        console.log('üè∑Ô∏è Types favoris:', favoriteTypes);
        console.log('üè∑Ô∏è Types recommand√©s:', recommendedTypes);
        
        const typeMatches = recommendedTypes.filter(type => favoriteTypes.includes(type));
        console.log('‚úÖ Correspondances de types:', typeMatches.length);
        
      } else {
        console.log('‚ùå Aucune recommandation re√ßue');
      }
      
    } catch (parseError) {
      console.error('‚ùå Erreur lors de l\'analyse des favoris:', parseError);
    }
  } else {
    console.log('‚ö†Ô∏è Aucun favori trouv√© dans localStorage');
  }
  
  // 4. Tester sans favoris pour comparaison
  console.log('\nüÜö 4. Test sans favoris (pour comparaison):');
  try {
    const response = await fetch('/api/recommendations', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        limit: 5,
        favorites: []
      }),
    });

    const data = await response.json();
    console.log('üìÑ Recommandations g√©n√©rales:', data.results?.map(r => r.title) || []);
    
  } catch (error) {
    console.error('‚ùå Erreur test sans favoris:', error);
  }
  
  console.log('\n‚ú® Diagnostic termin√©');
}

// Lancer le diagnostic
if (typeof window !== 'undefined') {
  diagnoseFavoritesIssue();
} else {
  console.log('Test uniquement disponible dans le navigateur');
}
